{"version":3,"sources":["Components/Result.js","Components/Rewards.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","MonthRewards","map","item","index","key","Months","Total","Rewards","state","name","data","showVal","err","handleChange","e","console","log","setState","target","value","handleReset","handleSubmit","preventDefault","monthNum","MonthTot","userTransactions","filter","fullName","toLowerCase","length","total","ToTAmount","transaction","i","Monthly","date","substring","push","p","reduce","acc","points","amount","concat","cv","this","type","onChange","onClick","style","color","Component","customerID","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOACe,SAASA,EAAOC,GAC7B,OACE,6BACE,wDACCA,EAAMC,aAAaC,KAAI,SAACC,EAAMC,GAAP,OACtB,uBAAGC,IAAKD,GACLJ,EAAMM,OAAOF,KADhB,KAC4BD,MAG7B,sCAA4B,IAAhBH,EAAMO,MAAcP,EAAMO,MAAQ,Q,ICRhCC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,KAAM,EAAKX,MAAMW,KACjBJ,MAAO,EACPN,aAAc,GACdK,OAAQ,CAAC,UAAW,WAAY,SAChCM,SAAS,EACTC,IAAK,I,EAGPC,aAAe,SAACC,GACdC,QAAQC,IAAI,SACZ,EAAKC,SAAS,CAAER,KAAMK,EAAEI,OAAOC,MAAOb,MAAO,EAAGM,IAAK,GAAID,SAAS,K,EAEpES,YAAc,SAACN,GACb,EAAKG,SAAS,CAAER,KAAM,GAAIH,MAAO,EAAGN,aAAc,GAAIW,SAAS,K,EAGjEU,aAAe,SAACP,GACdA,EAAEQ,iBADkB,MAEG,EAAKd,MAApBC,EAFY,EAEZA,KAAMC,EAFM,EAENA,KACVa,EAAW,CAAC,KAAM,KAAM,MACxBC,EAAW,GACXC,EAAmBf,EAAKgB,QAC1B,SAACxB,GAAD,OAAUA,EAAKyB,SAASC,gBAAkBnB,EAAKmB,iBAEjD,GAAIH,EAAiBI,OAAS,EAAG,CAE/B,IADA,IAAIC,EAAQ,EAAKC,UAAUN,EAAiB,GAAGO,aADhB,WAEtBC,GACP,IAAIC,EAAUT,EAAiB,GAAGO,YAAYN,QAC5C,SAACxB,GAAD,OAAUA,EAAKiC,KAAKC,UAAU,EAAG,KAAOb,EAASU,MAEnDT,EAASa,KAAK,EAAKN,UAAUG,KAJtBD,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAMT,EAAKhB,SAAS,CAAEX,MAAOwB,EAAO9B,aAAcwB,EAAUb,SAAS,SAE/D,EAAKM,SAAS,CAAEL,IAAK,oB,EAIzBmB,UAAY,SAACO,GACX,IAAIhC,EAAQgC,EAAEC,QAAO,SAACC,EAAKtC,GACzB,IAAIuC,EAIJ,OAHsBA,EAAlBvC,EAAKwC,OAAS,GAAa,EACtBxC,EAAKwC,QAAU,IAAcxC,EAAKwC,OAAS,GACtC,GAA2B,GAArBxC,EAAKwC,OAAS,KAC3BF,EAAIG,OAAOF,KACjB,IACH,OAAInC,EAAMuB,OAAS,EAAUvB,EAAMiC,QAAO,SAACC,EAAKI,GAAN,OAAaJ,EAAMI,KACjD,G,uDAGJ,IAAD,EACqDC,KAAKrC,MAAzDC,EADD,EACCA,KAAMG,EADP,EACOA,IAAKN,EADZ,EACYA,MAAON,EADnB,EACmBA,aAAcW,EADjC,EACiCA,QAASN,EAD1C,EAC0CA,OACjD,OACE,6BACE,8BACE,yCACA,2BACEyC,KAAK,OACL3B,MAAO0B,KAAKrC,MAAMC,KAClBsC,SAAUF,KAAKhC,eAEjB,4BAAQiC,KAAK,SAASE,QAASH,KAAKxB,cAApC,UAGA,4BAAQyB,KAAK,QAAQE,QAASH,KAAKzB,aAAnC,UAIF,+BAAKX,GACL,uBAAGwC,MAAO,CAAEC,MAAO,QAAnB,IAA8BtC,GAC7BD,EACC,kBAACb,EAAD,CAAQE,aAAcA,EAAcM,MAAOA,EAAOD,OAAQA,IAE1D,Q,GA5E2B8C,aCE/BzC,EAAO,CACX,CACEiB,SAAU,OACVyB,WAAY,EACZpB,YAAa,CACX,CACEU,OAAQ,GACRP,KAAM,cAER,CACEO,OAAQ,IACRP,KAAM,cAER,CACEO,OAAQ,GACRP,KAAM,cAER,CACEO,OAAQ,GACRP,KAAM,cAER,CACEO,OAAQ,KACRP,KAAM,gBAIZ,CACER,SAAU,SACVyB,WAAY,EACZpB,YAAa,CACX,CACEU,OAAQ,KACRP,KAAM,cAER,CACEO,OAAQ,GACRP,KAAM,cAER,CACEO,OAAQ,GACRP,KAAM,cAER,CACEO,OAAQ,IACRP,KAAM,cAER,CACEO,OAAQ,KACRP,KAAM,iBAaCkB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAS5C,KAAMA,MCjDD6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,a","file":"static/js/main.9aabd0a1.chunk.js","sourcesContent":["import React from \"react\";\r\nexport default function Result(props) {\r\n  return (\r\n    <div>\r\n      <h3> 3 months reward points:</h3>\r\n      {props.MonthRewards.map((item, index) => (\r\n        <p key={index}>\r\n          {props.Months[index++]}: {item}\r\n        </p>\r\n      ))}\r\n      {<p> Total: {props.Total !== 0 ? props.Total : \"N/A\"}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Result from \"./Result\";\r\nexport default class Rewards extends Component {\r\n  state = {\r\n    name: \"\",\r\n    data: this.props.data,\r\n    Total: 0,\r\n    MonthRewards: [],\r\n    Months: [\"January\", \"February\", \"March\"],\r\n    showVal: false,\r\n    err: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    console.log(\"reset\");\r\n    this.setState({ name: e.target.value, Total: 0, err: \"\", showVal: false });\r\n  };\r\n  handleReset = (e) => {\r\n    this.setState({ name: \"\", Total: 0, MonthRewards: [], showVal: false });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, data } = this.state;\r\n    let monthNum = [\"01\", \"02\", \"03\"];\r\n    let MonthTot = [];\r\n    let userTransactions = data.filter(\r\n      (item) => item.fullName.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (userTransactions.length > 0) {\r\n      let total = this.ToTAmount(userTransactions[0].transaction);\r\n      for (let i = 0; i < 3; i++) {\r\n        let Monthly = userTransactions[0].transaction.filter(\r\n          (item) => item.date.substring(0, 2) === monthNum[i]\r\n        );\r\n        MonthTot.push(this.ToTAmount(Monthly));\r\n      }\r\n      this.setState({ Total: total, MonthRewards: MonthTot, showVal: true });\r\n    } else {\r\n      this.setState({ err: \"Name not Found\" });\r\n    }\r\n  };\r\n\r\n  ToTAmount = (p) => {\r\n    let Total = p.reduce((acc, item) => {\r\n      let points;\r\n      if (item.amount < 50) points = 0;\r\n      else if (item.amount <= 100) points = item.amount - 50;\r\n      else points = 50 + (item.amount - 100) * 2;\r\n      return acc.concat(points);\r\n    }, []);\r\n    if (Total.length > 0) return Total.reduce((acc, cv) => acc + cv);\r\n    else return 0;\r\n  };\r\n\r\n  render() {\r\n    const { name, err, Total, MonthRewards, showVal, Months } = this.state;\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <button type=\"submit\" onClick={this.handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button type=\"reset\" onClick={this.handleReset}>\r\n            Reset\r\n          </button>\r\n        </form>\r\n        <p> {name}</p>\r\n        <p style={{ color: \"red\" }}> {err}</p>\r\n        {showVal ? (\r\n          <Result MonthRewards={MonthRewards} Total={Total} Months={Months} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Rewards from \"./Components/Rewards\";\n\nconst data = [\n  {\n    fullName: \"Mike\",\n    customerID: 1,\n    transaction: [\n      {\n        amount: 60,\n        date: \"01-01-2020\",\n      },\n      {\n        amount: 180,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 20,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 72,\n        date: \"03-01-2020\",\n      },\n      {\n        amount: 1500,\n        date: \"03-01-2020\",\n      },\n    ],\n  },\n  {\n    fullName: \"Petter\",\n    customerID: 2,\n    transaction: [\n      {\n        amount: 1860,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 20,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 90,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 175,\n        date: \"03-01-2020\",\n      },\n      {\n        amount: 1480,\n        date: \"03-01-2020\",\n      },\n    ],\n  },\n];\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Rewards data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}