{"version":3,"sources":["Components/Rewards.js","App.js","serviceWorker.js","index.js"],"names":["Rewards","state","name","data","props","Total","MonthRewards","Months","showVal","err","handleChange","e","setState","target","value","handleSubmit","preventDefault","monthNum","MonthTot","userTransactions","filter","item","fullName","toString","toLowerCase","length","total","ToTAmount","transaction","i","Monthly","date","substring","push","p","reduce","acc","points","amount","concat","cv","displayPoints","this","map","onSubmit","type","onChange","style","color","Component","customerID","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c002c684.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Rewards extends Component {\r\n  state = {\r\n    name: \"\",\r\n    data: this.props.data,\r\n    Total: 0,\r\n    MonthRewards: [],\r\n    Months: [\"January\", \"February\", \"March\"],\r\n    showVal: false,\r\n    err: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ name: e.target.value, Total: 0, err: \"\", showVal: false });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, data } = this.state;\r\n    let monthNum = [\"01\", \"02\", \"03\"];\r\n    let MonthTot = [];\r\n\r\n    let userTransactions = data.filter(\r\n      (item) =>\r\n        item.fullName.toString().toLowerCase() === name.toString().toLowerCase()\r\n    );\r\n\r\n    if (userTransactions.length > 0) {\r\n      let total = this.ToTAmount(userTransactions[0].transaction);\r\n      for (let i = 0; i < 3; i++) {\r\n        let Monthly = userTransactions[0].transaction.filter(\r\n          (item) => item.date.toString().substring(0, 2) === monthNum[i]\r\n        );\r\n\r\n        MonthTot.push(this.ToTAmount(Monthly));\r\n      }\r\n      this.setState({ Total: total, MonthRewards: MonthTot, showVal: true });\r\n    } else {\r\n      this.setState({ err: \"Name not Found\" });\r\n    }\r\n  };\r\n\r\n  ToTAmount = (p) => {\r\n    let Total = p.reduce((acc, item) => {\r\n      let points;\r\n      if (item.amount < 50) {\r\n        points = 0;\r\n      } else if (item.amount <= 100) {\r\n        points = item.amount - 50;\r\n      } else {\r\n        points = 50 + (item.amount - 100) * 2;\r\n      }\r\n      return acc.concat(points);\r\n    }, []);\r\n    if (Total.length > 0) {\r\n      return Total.reduce((acc, cv) => acc + cv);\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, err, Total, MonthRewards, showVal, Months } = this.state;\r\n    let i = 0;\r\n    let displayPoints;\r\n    if (showVal) {\r\n      displayPoints = (\r\n        <div>\r\n          <p>\r\n            3 months reward points:\r\n            {MonthRewards.map((item) => (\r\n              <p>\r\n                {Months[i++]}: {item}\r\n              </p>\r\n            ))}\r\n          </p>\r\n          <p> Total: {Total !== 0 ? Total : \"N/A\"}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <button type=\"submit\">Submit</button>\r\n          <button type=\"reset\">Reset</button>\r\n        </form>\r\n        <p> {name}</p>\r\n        <p style={{ color: \"red\" }}> {err}</p>\r\n        {displayPoints}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Rewards from \"./Components/Rewards\";\n\nconst data = [\n  {\n    fullName: \"Mike\",\n    customerID: 1,\n    transaction: [\n      {\n        amount: 60,\n        date: \"01-01-2020\",\n      },\n      {\n        amount: 180,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 20,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 72,\n        date: \"03-01-2020\",\n      },\n      {\n        amount: 1500,\n        date: \"03-01-2020\",\n      },\n    ],\n  },\n  {\n    fullName: \"Petter\",\n    customerID: 2,\n    transaction: [\n      {\n        amount: 1860,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 20,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 90,\n        date: \"02-01-2020\",\n      },\n      {\n        amount: 175,\n        date: \"03-01-2020\",\n      },\n      {\n        amount: 1480,\n        date: \"03-01-2020\",\n      },\n    ],\n  },\n];\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Rewards data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}